<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hp = global.s_hp;
speed = global.s_speed;
global.s_unit += 1;
atk = true;
obj_type = "player_unit";
myGoblin = false;
vis = true;
range = 128;
canSeasrch = true;

x_start = base_obj.x;
y_start = base_obj.y;
x_finish = global.x_finish;
y_finish = global.y_finish;
direction = point_direction(x,y,x_finish,y_finish);
my_target = instance_position(x_finish,y_finish,all);
move_towards_point(my_target.x,my_target.y,speed);
//dir = 0;

if global.s_free &gt; 0 { 
    global.s_free -= 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canSeasrch = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>atk = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if hp &lt;= 0 {
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(my_target) {

if my_target.obj_type = "goldmine" {
    
    if distance_to_object(my_target) &lt; 1 {
        
        if my_target.goblins_amount &gt; 0 {
            my_target.goblins_amount -= 1;
        }
        else {
            global.mySoldiers += 1;
            
            if my_target.defenders &lt; 3 {
                my_target.defenders += 1;
            }
            else {
                my_target = base_obj;
                speed = global.s_speed;
                move_towards_point(my_target.x,my_target.y,speed);
                direction = point_direction(x,y,my_target.x,my_target.y);
            }
        }
        
        instance_destroy();
    }
    else {
        speed = global.s_speed;
        move_towards_point(my_target.x,my_target.y,speed);
        direction = point_direction(x,y,my_target.x,my_target.y);
        
            if canSeasrch = true {
                searchGoblin();
                alarm[1] = room_speed / 2;
                canSeasrch = false;
            }
    }
}

if my_target.obj_type = "castle" {
    
    if distance_to_object(my_target) &lt; 1 {
        global.s_free += 1;
        instance_destroy();
    }
    else {
        speed = global.s_speed;
        move_towards_point(my_target.x,my_target.y,speed);
        direction = point_direction(x,y,my_target.x,my_target.y);
            
            if canSeasrch = true {
                searchGoblin();
                alarm[1] = room_speed / 2;
                canSeasrch = false;
            }
    }
}

if my_target.obj_type = "lair" {
    
    if distance_to_object(my_target) &gt; global.s_speed {
        speed = global.s_speed;
            
            if canSeasrch = true {
                searchGoblin();
                alarm[1] = room_speed / 2;
                canSeasrch = false;
            }
    }
    else {
        if !collision_circle(x,y,range,goblin_obj,true,false) || !instance_exists(my_target) {
            my_target = base_obj;
            speed = global.s_speed;
            move_towards_point(my_target.x,my_target.y,speed);
            direction = point_direction(x,y,my_target.x,my_target.y);
        }
        else {
            speed = global.s_speed;
            
            if canSeasrch = true {
                searchGoblin();
                alarm[1] = room_speed / 2;
                canSeasrch = false;
            }
        }
    }   
}

if my_target.obj_type = "enemy" {
    direction = point_direction(x,y,my_target.x,my_target.y); //потому что объект подвижный
    
    if distance_to_object(my_target) &gt; 1 {
        speed = global.s_speed;
        searchGoblin();
    }
    else {
        speed = 0;
                        
            if atk = true {
                my_target.g_hp -= global.s_minatk + round(random(global.s_maxatk - global.s_minatk));
                alarm[0] = room_speed;
                atk = false;
                effect_create_below(ef_flare,my_target.x,my_target.y,my_target.sprite_width * 1.4,c_red);
            }
    }
}

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !instance_exists(my_target) {
    
    if !collision_circle(x,y,range,goblin_obj,true,true) {
        my_target = base_obj;
        speed = global.s_speed;
        move_towards_point(my_target.x,my_target.y,speed);
        direction = point_direction(x,y,my_target.x,my_target.y);
    }
    else {
        speed = global.s_speed;
        
            if canSeasrch = true {
                searchGoblin();
                alarm[1] = room_speed / 2;
                canSeasrch = false;
            }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
draw_set_alpha(1);
image_angle =  direction;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
